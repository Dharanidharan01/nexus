import streamlit as st
from openai import OpenAI

client = OpenAI(api_key="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")

# Set page title and favicon
st.set_page_config(page_title="AI Storyteller", page_icon="üìñ")

# Add a header and description
st.title("AI Storyteller")
st.markdown("Enter a prompt and select the emotion you want the story to convey. Click 'Generate Story' to see the magic!")

# User input for prompt and story title
user_input_prompt = st.text_area("Write a prompt for the AI storyteller:")
user_input_title = st.text_input("Enter a title for the story:")

# Dropdown for selecting emotion
emotion_options = ["Happy", "Sad", "Excited", "Mysterious", "Surprised"]
selected_emotion = st.selectbox("Select the emotion for the story:", emotion_options)

# Button to generate the story and images
if st.button("Generate Story and Images"):
    if user_input_prompt:
        try:
            # Modify the prompt based on the selected emotion
            prompt_with_emotion = f"Write a {selected_emotion.lower()} story: {user_input_prompt}"

            # Generate story using OpenAI GPT-3.5-turbo-instruct engine
            response = client.completions.create(
                model="gpt-3.5-turbo-instruct",
                prompt=prompt_with_emotion,
                max_tokens=500
            )

            # Display the generated story with title
            st.subheader(f"**{user_input_title}**")
            st.write(response.choices[0].text)

            generated_text = response.choices[0].text
            words_per_chunk = 100

# Split the generated text into chunks of 100 words
            chunks = [generated_text[i:i + words_per_chunk] for i in range(0, len(generated_text), words_per_chunk)]

# Use DALL¬∑E to generate images based on each chunk
            for i, chunk in enumerate(chunks):
                image_response = client.images.generate(
                model="dall-e-2",
                prompt=chunk,
                n=5  # Generating one image for each chunk
    )
                

    # Process or save the image_response as needed for your application
    # The generated image for the i-th chunk can be accessed using image_response.choices[0].url or other attributes


            # Display all the generated images in a column
            st.subheader("Generated Images:")
            for i, image_data in enumerate(image_response.data):
                image_url = image_data.url
                st.image(image_url, caption=f"Image {i + 1} generated by DALL¬∑E", use_column_width=True)

        except Exception as e:
            st.error(f"An error occurred: {str(e)}")
    else:
        st.warning("Please enter a prompt for the AI storyteller.")

# Add a footer with attribution and link to OpenAI
st.markdown("---")
st.markdown("Built with ‚ù§Ô∏è by Nexus")

# Add some styling to the app
st.markdown(
    """
    <style>
        body {
            color: #394240;
            background-color: #f5f5f5;
        }
        .st-bd {
            padding: 10px;
        }
    </style>
    """,
    unsafe_allow_html=True
)
